# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cdisort', [dirname(__file__)])
        except ImportError:
            import _cdisort
            return _cdisort
        if fp is not None:
            try:
                _mod = imp.load_module('_cdisort', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cdisort = swig_import_helper()
    del swig_import_helper
else:
    import _cdisort
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class disort_flag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disort_flag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disort_flag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["usrtau"] = _cdisort.disort_flag_usrtau_set
    __swig_getmethods__["usrtau"] = _cdisort.disort_flag_usrtau_get
    if _newclass:usrtau = _swig_property(_cdisort.disort_flag_usrtau_get, _cdisort.disort_flag_usrtau_set)
    __swig_setmethods__["usrang"] = _cdisort.disort_flag_usrang_set
    __swig_getmethods__["usrang"] = _cdisort.disort_flag_usrang_get
    if _newclass:usrang = _swig_property(_cdisort.disort_flag_usrang_get, _cdisort.disort_flag_usrang_set)
    __swig_setmethods__["ibcnd"] = _cdisort.disort_flag_ibcnd_set
    __swig_getmethods__["ibcnd"] = _cdisort.disort_flag_ibcnd_get
    if _newclass:ibcnd = _swig_property(_cdisort.disort_flag_ibcnd_get, _cdisort.disort_flag_ibcnd_set)
    __swig_setmethods__["lamber"] = _cdisort.disort_flag_lamber_set
    __swig_getmethods__["lamber"] = _cdisort.disort_flag_lamber_get
    if _newclass:lamber = _swig_property(_cdisort.disort_flag_lamber_get, _cdisort.disort_flag_lamber_set)
    __swig_setmethods__["planck"] = _cdisort.disort_flag_planck_set
    __swig_getmethods__["planck"] = _cdisort.disort_flag_planck_get
    if _newclass:planck = _swig_property(_cdisort.disort_flag_planck_get, _cdisort.disort_flag_planck_set)
    __swig_setmethods__["spher"] = _cdisort.disort_flag_spher_set
    __swig_getmethods__["spher"] = _cdisort.disort_flag_spher_get
    if _newclass:spher = _swig_property(_cdisort.disort_flag_spher_get, _cdisort.disort_flag_spher_set)
    __swig_setmethods__["onlyfl"] = _cdisort.disort_flag_onlyfl_set
    __swig_getmethods__["onlyfl"] = _cdisort.disort_flag_onlyfl_get
    if _newclass:onlyfl = _swig_property(_cdisort.disort_flag_onlyfl_get, _cdisort.disort_flag_onlyfl_set)
    __swig_setmethods__["prnt"] = _cdisort.disort_flag_prnt_set
    __swig_getmethods__["prnt"] = _cdisort.disort_flag_prnt_get
    if _newclass:prnt = _swig_property(_cdisort.disort_flag_prnt_get, _cdisort.disort_flag_prnt_set)
    __swig_setmethods__["brdf_type"] = _cdisort.disort_flag_brdf_type_set
    __swig_getmethods__["brdf_type"] = _cdisort.disort_flag_brdf_type_get
    if _newclass:brdf_type = _swig_property(_cdisort.disort_flag_brdf_type_get, _cdisort.disort_flag_brdf_type_set)
    __swig_setmethods__["quiet"] = _cdisort.disort_flag_quiet_set
    __swig_getmethods__["quiet"] = _cdisort.disort_flag_quiet_get
    if _newclass:quiet = _swig_property(_cdisort.disort_flag_quiet_get, _cdisort.disort_flag_quiet_set)
    __swig_setmethods__["intensity_correction"] = _cdisort.disort_flag_intensity_correction_set
    __swig_getmethods__["intensity_correction"] = _cdisort.disort_flag_intensity_correction_get
    if _newclass:intensity_correction = _swig_property(_cdisort.disort_flag_intensity_correction_get, _cdisort.disort_flag_intensity_correction_set)
    __swig_setmethods__["old_intensity_correction"] = _cdisort.disort_flag_old_intensity_correction_set
    __swig_getmethods__["old_intensity_correction"] = _cdisort.disort_flag_old_intensity_correction_get
    if _newclass:old_intensity_correction = _swig_property(_cdisort.disort_flag_old_intensity_correction_get, _cdisort.disort_flag_old_intensity_correction_set)
    def __init__(self): 
        this = _cdisort.new_disort_flag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_disort_flag
    __del__ = lambda self : None;
disort_flag_swigregister = _cdisort.disort_flag_swigregister
disort_flag_swigregister(disort_flag)

class disort_radiant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disort_radiant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disort_radiant, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rfldir"] = _cdisort.disort_radiant_rfldir_set
    __swig_getmethods__["rfldir"] = _cdisort.disort_radiant_rfldir_get
    if _newclass:rfldir = _swig_property(_cdisort.disort_radiant_rfldir_get, _cdisort.disort_radiant_rfldir_set)
    __swig_setmethods__["rfldn"] = _cdisort.disort_radiant_rfldn_set
    __swig_getmethods__["rfldn"] = _cdisort.disort_radiant_rfldn_get
    if _newclass:rfldn = _swig_property(_cdisort.disort_radiant_rfldn_get, _cdisort.disort_radiant_rfldn_set)
    __swig_setmethods__["flup"] = _cdisort.disort_radiant_flup_set
    __swig_getmethods__["flup"] = _cdisort.disort_radiant_flup_get
    if _newclass:flup = _swig_property(_cdisort.disort_radiant_flup_get, _cdisort.disort_radiant_flup_set)
    __swig_setmethods__["dfdt"] = _cdisort.disort_radiant_dfdt_set
    __swig_getmethods__["dfdt"] = _cdisort.disort_radiant_dfdt_get
    if _newclass:dfdt = _swig_property(_cdisort.disort_radiant_dfdt_get, _cdisort.disort_radiant_dfdt_set)
    __swig_setmethods__["uavg"] = _cdisort.disort_radiant_uavg_set
    __swig_getmethods__["uavg"] = _cdisort.disort_radiant_uavg_get
    if _newclass:uavg = _swig_property(_cdisort.disort_radiant_uavg_get, _cdisort.disort_radiant_uavg_set)
    __swig_setmethods__["uavgdn"] = _cdisort.disort_radiant_uavgdn_set
    __swig_getmethods__["uavgdn"] = _cdisort.disort_radiant_uavgdn_get
    if _newclass:uavgdn = _swig_property(_cdisort.disort_radiant_uavgdn_get, _cdisort.disort_radiant_uavgdn_set)
    __swig_setmethods__["uavgup"] = _cdisort.disort_radiant_uavgup_set
    __swig_getmethods__["uavgup"] = _cdisort.disort_radiant_uavgup_get
    if _newclass:uavgup = _swig_property(_cdisort.disort_radiant_uavgup_get, _cdisort.disort_radiant_uavgup_set)
    __swig_setmethods__["uavgso"] = _cdisort.disort_radiant_uavgso_set
    __swig_getmethods__["uavgso"] = _cdisort.disort_radiant_uavgso_get
    if _newclass:uavgso = _swig_property(_cdisort.disort_radiant_uavgso_get, _cdisort.disort_radiant_uavgso_set)
    def __init__(self): 
        this = _cdisort.new_disort_radiant()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_disort_radiant
    __del__ = lambda self : None;
disort_radiant_swigregister = _cdisort.disort_radiant_swigregister
disort_radiant_swigregister(disort_radiant)

class disort_bc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disort_bc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disort_bc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fbeam"] = _cdisort.disort_bc_fbeam_set
    __swig_getmethods__["fbeam"] = _cdisort.disort_bc_fbeam_get
    if _newclass:fbeam = _swig_property(_cdisort.disort_bc_fbeam_get, _cdisort.disort_bc_fbeam_set)
    __swig_setmethods__["umu0"] = _cdisort.disort_bc_umu0_set
    __swig_getmethods__["umu0"] = _cdisort.disort_bc_umu0_get
    if _newclass:umu0 = _swig_property(_cdisort.disort_bc_umu0_get, _cdisort.disort_bc_umu0_set)
    __swig_setmethods__["phi0"] = _cdisort.disort_bc_phi0_set
    __swig_getmethods__["phi0"] = _cdisort.disort_bc_phi0_get
    if _newclass:phi0 = _swig_property(_cdisort.disort_bc_phi0_get, _cdisort.disort_bc_phi0_set)
    __swig_setmethods__["fisot"] = _cdisort.disort_bc_fisot_set
    __swig_getmethods__["fisot"] = _cdisort.disort_bc_fisot_get
    if _newclass:fisot = _swig_property(_cdisort.disort_bc_fisot_get, _cdisort.disort_bc_fisot_set)
    __swig_setmethods__["ttemp"] = _cdisort.disort_bc_ttemp_set
    __swig_getmethods__["ttemp"] = _cdisort.disort_bc_ttemp_get
    if _newclass:ttemp = _swig_property(_cdisort.disort_bc_ttemp_get, _cdisort.disort_bc_ttemp_set)
    __swig_setmethods__["btemp"] = _cdisort.disort_bc_btemp_set
    __swig_getmethods__["btemp"] = _cdisort.disort_bc_btemp_get
    if _newclass:btemp = _swig_property(_cdisort.disort_bc_btemp_get, _cdisort.disort_bc_btemp_set)
    __swig_setmethods__["temis"] = _cdisort.disort_bc_temis_set
    __swig_getmethods__["temis"] = _cdisort.disort_bc_temis_get
    if _newclass:temis = _swig_property(_cdisort.disort_bc_temis_get, _cdisort.disort_bc_temis_set)
    __swig_setmethods__["albedo"] = _cdisort.disort_bc_albedo_set
    __swig_getmethods__["albedo"] = _cdisort.disort_bc_albedo_get
    if _newclass:albedo = _swig_property(_cdisort.disort_bc_albedo_get, _cdisort.disort_bc_albedo_set)
    def __init__(self): 
        this = _cdisort.new_disort_bc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_disort_bc
    __del__ = lambda self : None;
disort_bc_swigregister = _cdisort.disort_bc_swigregister
disort_bc_swigregister(disort_bc)

class rpv_brdf_spec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rpv_brdf_spec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rpv_brdf_spec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rho0"] = _cdisort.rpv_brdf_spec_rho0_set
    __swig_getmethods__["rho0"] = _cdisort.rpv_brdf_spec_rho0_get
    if _newclass:rho0 = _swig_property(_cdisort.rpv_brdf_spec_rho0_get, _cdisort.rpv_brdf_spec_rho0_set)
    __swig_setmethods__["k"] = _cdisort.rpv_brdf_spec_k_set
    __swig_getmethods__["k"] = _cdisort.rpv_brdf_spec_k_get
    if _newclass:k = _swig_property(_cdisort.rpv_brdf_spec_k_get, _cdisort.rpv_brdf_spec_k_set)
    __swig_setmethods__["theta"] = _cdisort.rpv_brdf_spec_theta_set
    __swig_getmethods__["theta"] = _cdisort.rpv_brdf_spec_theta_get
    if _newclass:theta = _swig_property(_cdisort.rpv_brdf_spec_theta_get, _cdisort.rpv_brdf_spec_theta_set)
    __swig_setmethods__["sigma"] = _cdisort.rpv_brdf_spec_sigma_set
    __swig_getmethods__["sigma"] = _cdisort.rpv_brdf_spec_sigma_get
    if _newclass:sigma = _swig_property(_cdisort.rpv_brdf_spec_sigma_get, _cdisort.rpv_brdf_spec_sigma_set)
    __swig_setmethods__["t1"] = _cdisort.rpv_brdf_spec_t1_set
    __swig_getmethods__["t1"] = _cdisort.rpv_brdf_spec_t1_get
    if _newclass:t1 = _swig_property(_cdisort.rpv_brdf_spec_t1_get, _cdisort.rpv_brdf_spec_t1_set)
    __swig_setmethods__["t2"] = _cdisort.rpv_brdf_spec_t2_set
    __swig_getmethods__["t2"] = _cdisort.rpv_brdf_spec_t2_get
    if _newclass:t2 = _swig_property(_cdisort.rpv_brdf_spec_t2_get, _cdisort.rpv_brdf_spec_t2_set)
    __swig_setmethods__["scale"] = _cdisort.rpv_brdf_spec_scale_set
    __swig_getmethods__["scale"] = _cdisort.rpv_brdf_spec_scale_get
    if _newclass:scale = _swig_property(_cdisort.rpv_brdf_spec_scale_get, _cdisort.rpv_brdf_spec_scale_set)
    def __init__(self): 
        this = _cdisort.new_rpv_brdf_spec()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_rpv_brdf_spec
    __del__ = lambda self : None;
rpv_brdf_spec_swigregister = _cdisort.rpv_brdf_spec_swigregister
rpv_brdf_spec_swigregister(rpv_brdf_spec)

class ambrals_brdf_spec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ambrals_brdf_spec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ambrals_brdf_spec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iso"] = _cdisort.ambrals_brdf_spec_iso_set
    __swig_getmethods__["iso"] = _cdisort.ambrals_brdf_spec_iso_get
    if _newclass:iso = _swig_property(_cdisort.ambrals_brdf_spec_iso_get, _cdisort.ambrals_brdf_spec_iso_set)
    __swig_setmethods__["vol"] = _cdisort.ambrals_brdf_spec_vol_set
    __swig_getmethods__["vol"] = _cdisort.ambrals_brdf_spec_vol_get
    if _newclass:vol = _swig_property(_cdisort.ambrals_brdf_spec_vol_get, _cdisort.ambrals_brdf_spec_vol_set)
    __swig_setmethods__["geo"] = _cdisort.ambrals_brdf_spec_geo_set
    __swig_getmethods__["geo"] = _cdisort.ambrals_brdf_spec_geo_get
    if _newclass:geo = _swig_property(_cdisort.ambrals_brdf_spec_geo_get, _cdisort.ambrals_brdf_spec_geo_set)
    def __init__(self): 
        this = _cdisort.new_ambrals_brdf_spec()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_ambrals_brdf_spec
    __del__ = lambda self : None;
ambrals_brdf_spec_swigregister = _cdisort.ambrals_brdf_spec_swigregister
ambrals_brdf_spec_swigregister(ambrals_brdf_spec)

class cam_brdf_spec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cam_brdf_spec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cam_brdf_spec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u10"] = _cdisort.cam_brdf_spec_u10_set
    __swig_getmethods__["u10"] = _cdisort.cam_brdf_spec_u10_get
    if _newclass:u10 = _swig_property(_cdisort.cam_brdf_spec_u10_get, _cdisort.cam_brdf_spec_u10_set)
    __swig_setmethods__["pcl"] = _cdisort.cam_brdf_spec_pcl_set
    __swig_getmethods__["pcl"] = _cdisort.cam_brdf_spec_pcl_get
    if _newclass:pcl = _swig_property(_cdisort.cam_brdf_spec_pcl_get, _cdisort.cam_brdf_spec_pcl_set)
    __swig_setmethods__["xsal"] = _cdisort.cam_brdf_spec_xsal_set
    __swig_getmethods__["xsal"] = _cdisort.cam_brdf_spec_xsal_get
    if _newclass:xsal = _swig_property(_cdisort.cam_brdf_spec_xsal_get, _cdisort.cam_brdf_spec_xsal_set)
    def __init__(self): 
        this = _cdisort.new_cam_brdf_spec()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_cam_brdf_spec
    __del__ = lambda self : None;
cam_brdf_spec_swigregister = _cdisort.cam_brdf_spec_swigregister
cam_brdf_spec_swigregister(cam_brdf_spec)

class disort_brdf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disort_brdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disort_brdf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rpv"] = _cdisort.disort_brdf_rpv_set
    __swig_getmethods__["rpv"] = _cdisort.disort_brdf_rpv_get
    if _newclass:rpv = _swig_property(_cdisort.disort_brdf_rpv_get, _cdisort.disort_brdf_rpv_set)
    def __init__(self): 
        this = _cdisort.new_disort_brdf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_disort_brdf
    __del__ = lambda self : None;
disort_brdf_swigregister = _cdisort.disort_brdf_swigregister
disort_brdf_swigregister(disort_brdf)

class disort_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disort_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disort_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _cdisort.disort_state_header_set
    __swig_getmethods__["header"] = _cdisort.disort_state_header_get
    if _newclass:header = _swig_property(_cdisort.disort_state_header_get, _cdisort.disort_state_header_set)
    __swig_setmethods__["flag"] = _cdisort.disort_state_flag_set
    __swig_getmethods__["flag"] = _cdisort.disort_state_flag_get
    if _newclass:flag = _swig_property(_cdisort.disort_state_flag_get, _cdisort.disort_state_flag_set)
    __swig_setmethods__["bc"] = _cdisort.disort_state_bc_set
    __swig_getmethods__["bc"] = _cdisort.disort_state_bc_get
    if _newclass:bc = _swig_property(_cdisort.disort_state_bc_get, _cdisort.disort_state_bc_set)
    __swig_setmethods__["brdf"] = _cdisort.disort_state_brdf_set
    __swig_getmethods__["brdf"] = _cdisort.disort_state_brdf_get
    if _newclass:brdf = _swig_property(_cdisort.disort_state_brdf_get, _cdisort.disort_state_brdf_set)
    __swig_setmethods__["nlyr"] = _cdisort.disort_state_nlyr_set
    __swig_getmethods__["nlyr"] = _cdisort.disort_state_nlyr_get
    if _newclass:nlyr = _swig_property(_cdisort.disort_state_nlyr_get, _cdisort.disort_state_nlyr_set)
    __swig_setmethods__["nmom"] = _cdisort.disort_state_nmom_set
    __swig_getmethods__["nmom"] = _cdisort.disort_state_nmom_get
    if _newclass:nmom = _swig_property(_cdisort.disort_state_nmom_get, _cdisort.disort_state_nmom_set)
    __swig_setmethods__["nstr"] = _cdisort.disort_state_nstr_set
    __swig_getmethods__["nstr"] = _cdisort.disort_state_nstr_get
    if _newclass:nstr = _swig_property(_cdisort.disort_state_nstr_get, _cdisort.disort_state_nstr_set)
    __swig_setmethods__["nmom_nstr"] = _cdisort.disort_state_nmom_nstr_set
    __swig_getmethods__["nmom_nstr"] = _cdisort.disort_state_nmom_nstr_get
    if _newclass:nmom_nstr = _swig_property(_cdisort.disort_state_nmom_nstr_get, _cdisort.disort_state_nmom_nstr_set)
    __swig_setmethods__["ntau"] = _cdisort.disort_state_ntau_set
    __swig_getmethods__["ntau"] = _cdisort.disort_state_ntau_get
    if _newclass:ntau = _swig_property(_cdisort.disort_state_ntau_get, _cdisort.disort_state_ntau_set)
    __swig_setmethods__["numu"] = _cdisort.disort_state_numu_set
    __swig_getmethods__["numu"] = _cdisort.disort_state_numu_get
    if _newclass:numu = _swig_property(_cdisort.disort_state_numu_get, _cdisort.disort_state_numu_set)
    __swig_setmethods__["nphi"] = _cdisort.disort_state_nphi_set
    __swig_getmethods__["nphi"] = _cdisort.disort_state_nphi_get
    if _newclass:nphi = _swig_property(_cdisort.disort_state_nphi_get, _cdisort.disort_state_nphi_set)
    __swig_setmethods__["nphase"] = _cdisort.disort_state_nphase_set
    __swig_getmethods__["nphase"] = _cdisort.disort_state_nphase_get
    if _newclass:nphase = _swig_property(_cdisort.disort_state_nphase_get, _cdisort.disort_state_nphase_set)
    __swig_setmethods__["wvnmlo"] = _cdisort.disort_state_wvnmlo_set
    __swig_getmethods__["wvnmlo"] = _cdisort.disort_state_wvnmlo_get
    if _newclass:wvnmlo = _swig_property(_cdisort.disort_state_wvnmlo_get, _cdisort.disort_state_wvnmlo_set)
    __swig_setmethods__["wvnmhi"] = _cdisort.disort_state_wvnmhi_set
    __swig_getmethods__["wvnmhi"] = _cdisort.disort_state_wvnmhi_get
    if _newclass:wvnmhi = _swig_property(_cdisort.disort_state_wvnmhi_get, _cdisort.disort_state_wvnmhi_set)
    __swig_setmethods__["accur"] = _cdisort.disort_state_accur_set
    __swig_getmethods__["accur"] = _cdisort.disort_state_accur_get
    if _newclass:accur = _swig_property(_cdisort.disort_state_accur_get, _cdisort.disort_state_accur_set)
    __swig_setmethods__["radius"] = _cdisort.disort_state_radius_set
    __swig_getmethods__["radius"] = _cdisort.disort_state_radius_get
    if _newclass:radius = _swig_property(_cdisort.disort_state_radius_get, _cdisort.disort_state_radius_set)
    __swig_setmethods__["dtauc"] = _cdisort.disort_state_dtauc_set
    __swig_getmethods__["dtauc"] = _cdisort.disort_state_dtauc_get
    if _newclass:dtauc = _swig_property(_cdisort.disort_state_dtauc_get, _cdisort.disort_state_dtauc_set)
    __swig_setmethods__["ssalb"] = _cdisort.disort_state_ssalb_set
    __swig_getmethods__["ssalb"] = _cdisort.disort_state_ssalb_get
    if _newclass:ssalb = _swig_property(_cdisort.disort_state_ssalb_get, _cdisort.disort_state_ssalb_set)
    __swig_setmethods__["pmom"] = _cdisort.disort_state_pmom_set
    __swig_getmethods__["pmom"] = _cdisort.disort_state_pmom_get
    if _newclass:pmom = _swig_property(_cdisort.disort_state_pmom_get, _cdisort.disort_state_pmom_set)
    __swig_setmethods__["temper"] = _cdisort.disort_state_temper_set
    __swig_getmethods__["temper"] = _cdisort.disort_state_temper_get
    if _newclass:temper = _swig_property(_cdisort.disort_state_temper_get, _cdisort.disort_state_temper_set)
    __swig_setmethods__["utau"] = _cdisort.disort_state_utau_set
    __swig_getmethods__["utau"] = _cdisort.disort_state_utau_get
    if _newclass:utau = _swig_property(_cdisort.disort_state_utau_get, _cdisort.disort_state_utau_set)
    __swig_setmethods__["umu"] = _cdisort.disort_state_umu_set
    __swig_getmethods__["umu"] = _cdisort.disort_state_umu_get
    if _newclass:umu = _swig_property(_cdisort.disort_state_umu_get, _cdisort.disort_state_umu_set)
    __swig_setmethods__["phi"] = _cdisort.disort_state_phi_set
    __swig_getmethods__["phi"] = _cdisort.disort_state_phi_get
    if _newclass:phi = _swig_property(_cdisort.disort_state_phi_get, _cdisort.disort_state_phi_set)
    __swig_setmethods__["zd"] = _cdisort.disort_state_zd_set
    __swig_getmethods__["zd"] = _cdisort.disort_state_zd_get
    if _newclass:zd = _swig_property(_cdisort.disort_state_zd_get, _cdisort.disort_state_zd_set)
    __swig_setmethods__["mu_phase"] = _cdisort.disort_state_mu_phase_set
    __swig_getmethods__["mu_phase"] = _cdisort.disort_state_mu_phase_get
    if _newclass:mu_phase = _swig_property(_cdisort.disort_state_mu_phase_get, _cdisort.disort_state_mu_phase_set)
    __swig_setmethods__["phase"] = _cdisort.disort_state_phase_set
    __swig_getmethods__["phase"] = _cdisort.disort_state_phase_get
    if _newclass:phase = _swig_property(_cdisort.disort_state_phase_get, _cdisort.disort_state_phase_set)
    def __init__(self): 
        this = _cdisort.new_disort_state()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_disort_state
    __del__ = lambda self : None;
disort_state_swigregister = _cdisort.disort_state_swigregister
disort_state_swigregister(disort_state)

class disort_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disort_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disort_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rad"] = _cdisort.disort_output_rad_set
    __swig_getmethods__["rad"] = _cdisort.disort_output_rad_get
    if _newclass:rad = _swig_property(_cdisort.disort_output_rad_get, _cdisort.disort_output_rad_set)
    __swig_setmethods__["albmed"] = _cdisort.disort_output_albmed_set
    __swig_getmethods__["albmed"] = _cdisort.disort_output_albmed_get
    if _newclass:albmed = _swig_property(_cdisort.disort_output_albmed_get, _cdisort.disort_output_albmed_set)
    __swig_setmethods__["trnmed"] = _cdisort.disort_output_trnmed_set
    __swig_getmethods__["trnmed"] = _cdisort.disort_output_trnmed_get
    if _newclass:trnmed = _swig_property(_cdisort.disort_output_trnmed_get, _cdisort.disort_output_trnmed_set)
    __swig_setmethods__["uu"] = _cdisort.disort_output_uu_set
    __swig_getmethods__["uu"] = _cdisort.disort_output_uu_get
    if _newclass:uu = _swig_property(_cdisort.disort_output_uu_get, _cdisort.disort_output_uu_set)
    __swig_setmethods__["u0u"] = _cdisort.disort_output_u0u_set
    __swig_getmethods__["u0u"] = _cdisort.disort_output_u0u_get
    if _newclass:u0u = _swig_property(_cdisort.disort_output_u0u_get, _cdisort.disort_output_u0u_set)
    def __init__(self): 
        this = _cdisort.new_disort_output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_disort_output
    __del__ = lambda self : None;
disort_output_swigregister = _cdisort.disort_output_swigregister
disort_output_swigregister(disort_output)

class disort_pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disort_pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disort_pair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["zero"] = _cdisort.disort_pair_zero_set
    __swig_getmethods__["zero"] = _cdisort.disort_pair_zero_get
    if _newclass:zero = _swig_property(_cdisort.disort_pair_zero_get, _cdisort.disort_pair_zero_set)
    __swig_setmethods__["one"] = _cdisort.disort_pair_one_set
    __swig_getmethods__["one"] = _cdisort.disort_pair_one_get
    if _newclass:one = _swig_property(_cdisort.disort_pair_one_get, _cdisort.disort_pair_one_set)
    def __init__(self): 
        this = _cdisort.new_disort_pair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_disort_pair
    __del__ = lambda self : None;
disort_pair_swigregister = _cdisort.disort_pair_swigregister
disort_pair_swigregister(disort_pair)

class disort_triplet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disort_triplet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disort_triplet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["zero"] = _cdisort.disort_triplet_zero_set
    __swig_getmethods__["zero"] = _cdisort.disort_triplet_zero_get
    if _newclass:zero = _swig_property(_cdisort.disort_triplet_zero_get, _cdisort.disort_triplet_zero_set)
    __swig_setmethods__["one"] = _cdisort.disort_triplet_one_set
    __swig_getmethods__["one"] = _cdisort.disort_triplet_one_get
    if _newclass:one = _swig_property(_cdisort.disort_triplet_one_get, _cdisort.disort_triplet_one_set)
    __swig_setmethods__["alpha"] = _cdisort.disort_triplet_alpha_set
    __swig_getmethods__["alpha"] = _cdisort.disort_triplet_alpha_get
    if _newclass:alpha = _swig_property(_cdisort.disort_triplet_alpha_get, _cdisort.disort_triplet_alpha_set)
    def __init__(self): 
        this = _cdisort.new_disort_triplet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_disort_triplet
    __del__ = lambda self : None;
disort_triplet_swigregister = _cdisort.disort_triplet_swigregister
disort_triplet_swigregister(disort_triplet)

TWOSTR_NERR = _cdisort.TWOSTR_NERR
class twostr_diag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twostr_diag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twostr_diag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["super"] = _cdisort.twostr_diag_super_set
    __swig_getmethods__["super"] = _cdisort.twostr_diag_super_get
    if _newclass:super = _swig_property(_cdisort.twostr_diag_super_get, _cdisort.twostr_diag_super_set)
    __swig_setmethods__["on"] = _cdisort.twostr_diag_on_set
    __swig_getmethods__["on"] = _cdisort.twostr_diag_on_get
    if _newclass:on = _swig_property(_cdisort.twostr_diag_on_get, _cdisort.twostr_diag_on_set)
    __swig_setmethods__["sub"] = _cdisort.twostr_diag_sub_set
    __swig_getmethods__["sub"] = _cdisort.twostr_diag_sub_get
    if _newclass:sub = _swig_property(_cdisort.twostr_diag_sub_get, _cdisort.twostr_diag_sub_set)
    def __init__(self): 
        this = _cdisort.new_twostr_diag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_twostr_diag
    __del__ = lambda self : None;
twostr_diag_swigregister = _cdisort.twostr_diag_swigregister
twostr_diag_swigregister(twostr_diag)

class twostr_xyz(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twostr_xyz, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twostr_xyz, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xb_0d"] = _cdisort.twostr_xyz_xb_0d_set
    __swig_getmethods__["xb_0d"] = _cdisort.twostr_xyz_xb_0d_get
    if _newclass:xb_0d = _swig_property(_cdisort.twostr_xyz_xb_0d_get, _cdisort.twostr_xyz_xb_0d_set)
    __swig_setmethods__["xb_0u"] = _cdisort.twostr_xyz_xb_0u_set
    __swig_getmethods__["xb_0u"] = _cdisort.twostr_xyz_xb_0u_get
    if _newclass:xb_0u = _swig_property(_cdisort.twostr_xyz_xb_0u_get, _cdisort.twostr_xyz_xb_0u_set)
    __swig_setmethods__["xb_1d"] = _cdisort.twostr_xyz_xb_1d_set
    __swig_getmethods__["xb_1d"] = _cdisort.twostr_xyz_xb_1d_get
    if _newclass:xb_1d = _swig_property(_cdisort.twostr_xyz_xb_1d_get, _cdisort.twostr_xyz_xb_1d_set)
    __swig_setmethods__["xb_1u"] = _cdisort.twostr_xyz_xb_1u_set
    __swig_getmethods__["xb_1u"] = _cdisort.twostr_xyz_xb_1u_get
    if _newclass:xb_1u = _swig_property(_cdisort.twostr_xyz_xb_1u_get, _cdisort.twostr_xyz_xb_1u_set)
    __swig_setmethods__["xp_0"] = _cdisort.twostr_xyz_xp_0_set
    __swig_getmethods__["xp_0"] = _cdisort.twostr_xyz_xp_0_get
    if _newclass:xp_0 = _swig_property(_cdisort.twostr_xyz_xp_0_get, _cdisort.twostr_xyz_xp_0_set)
    __swig_setmethods__["xp_1"] = _cdisort.twostr_xyz_xp_1_set
    __swig_getmethods__["xp_1"] = _cdisort.twostr_xyz_xp_1_get
    if _newclass:xp_1 = _swig_property(_cdisort.twostr_xyz_xp_1_get, _cdisort.twostr_xyz_xp_1_set)
    __swig_setmethods__["yb_0d"] = _cdisort.twostr_xyz_yb_0d_set
    __swig_getmethods__["yb_0d"] = _cdisort.twostr_xyz_yb_0d_get
    if _newclass:yb_0d = _swig_property(_cdisort.twostr_xyz_yb_0d_get, _cdisort.twostr_xyz_yb_0d_set)
    __swig_setmethods__["yb_0u"] = _cdisort.twostr_xyz_yb_0u_set
    __swig_getmethods__["yb_0u"] = _cdisort.twostr_xyz_yb_0u_get
    if _newclass:yb_0u = _swig_property(_cdisort.twostr_xyz_yb_0u_get, _cdisort.twostr_xyz_yb_0u_set)
    __swig_setmethods__["yb_1d"] = _cdisort.twostr_xyz_yb_1d_set
    __swig_getmethods__["yb_1d"] = _cdisort.twostr_xyz_yb_1d_get
    if _newclass:yb_1d = _swig_property(_cdisort.twostr_xyz_yb_1d_get, _cdisort.twostr_xyz_yb_1d_set)
    __swig_setmethods__["yb_1u"] = _cdisort.twostr_xyz_yb_1u_set
    __swig_getmethods__["yb_1u"] = _cdisort.twostr_xyz_yb_1u_get
    if _newclass:yb_1u = _swig_property(_cdisort.twostr_xyz_yb_1u_get, _cdisort.twostr_xyz_yb_1u_set)
    __swig_setmethods__["yp_0d"] = _cdisort.twostr_xyz_yp_0d_set
    __swig_getmethods__["yp_0d"] = _cdisort.twostr_xyz_yp_0d_get
    if _newclass:yp_0d = _swig_property(_cdisort.twostr_xyz_yp_0d_get, _cdisort.twostr_xyz_yp_0d_set)
    __swig_setmethods__["yp_0u"] = _cdisort.twostr_xyz_yp_0u_set
    __swig_getmethods__["yp_0u"] = _cdisort.twostr_xyz_yp_0u_get
    if _newclass:yp_0u = _swig_property(_cdisort.twostr_xyz_yp_0u_get, _cdisort.twostr_xyz_yp_0u_set)
    __swig_setmethods__["yp_1d"] = _cdisort.twostr_xyz_yp_1d_set
    __swig_getmethods__["yp_1d"] = _cdisort.twostr_xyz_yp_1d_get
    if _newclass:yp_1d = _swig_property(_cdisort.twostr_xyz_yp_1d_get, _cdisort.twostr_xyz_yp_1d_set)
    __swig_setmethods__["yp_1u"] = _cdisort.twostr_xyz_yp_1u_set
    __swig_getmethods__["yp_1u"] = _cdisort.twostr_xyz_yp_1u_get
    if _newclass:yp_1u = _swig_property(_cdisort.twostr_xyz_yp_1u_get, _cdisort.twostr_xyz_yp_1u_set)
    __swig_setmethods__["zb_a"] = _cdisort.twostr_xyz_zb_a_set
    __swig_getmethods__["zb_a"] = _cdisort.twostr_xyz_zb_a_get
    if _newclass:zb_a = _swig_property(_cdisort.twostr_xyz_zb_a_get, _cdisort.twostr_xyz_zb_a_set)
    __swig_setmethods__["zp_a"] = _cdisort.twostr_xyz_zp_a_set
    __swig_getmethods__["zp_a"] = _cdisort.twostr_xyz_zp_a_get
    if _newclass:zp_a = _swig_property(_cdisort.twostr_xyz_zp_a_get, _cdisort.twostr_xyz_zp_a_set)
    def __init__(self): 
        this = _cdisort.new_twostr_xyz()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cdisort.delete_twostr_xyz
    __del__ = lambda self : None;
twostr_xyz_swigregister = _cdisort.twostr_xyz_swigregister
twostr_xyz_swigregister(twostr_xyz)

TRUE = _cdisort.TRUE
FALSE = _cdisort.FALSE
FIRST_IPHAS = _cdisort.FIRST_IPHAS
ISOTROPIC = _cdisort.ISOTROPIC
RAYLEIGH = _cdisort.RAYLEIGH
HENYEY_GREENSTEIN = _cdisort.HENYEY_GREENSTEIN
HAZE_GARCIA_SIEWERT = _cdisort.HAZE_GARCIA_SIEWERT
CLOUD_GARCIA_SIEWERT = _cdisort.CLOUD_GARCIA_SIEWERT
LAST_IPHAS = _cdisort.LAST_IPHAS
GENERAL_BC = _cdisort.GENERAL_BC
SPECIAL_BC = _cdisort.SPECIAL_BC
TOP_ILLUM = _cdisort.TOP_ILLUM
BOT_ILLUM = _cdisort.BOT_ILLUM
DS_WARNING = _cdisort.DS_WARNING
DS_ERROR = _cdisort.DS_ERROR
VERBOSE = _cdisort.VERBOSE
QUIET = _cdisort.QUIET
BRDF_NONE = _cdisort.BRDF_NONE
BRDF_RPV = _cdisort.BRDF_RPV
BRDF_CAM = _cdisort.BRDF_CAM
BRDF_AMB = _cdisort.BRDF_AMB
BRDF_HAPKE = _cdisort.BRDF_HAPKE
NMUG = _cdisort.NMUG
M_E = _cdisort.M_E
M_LOG2E = _cdisort.M_LOG2E
M_LOG10E = _cdisort.M_LOG10E
M_LN2 = _cdisort.M_LN2
M_LN10 = _cdisort.M_LN10
M_PI = _cdisort.M_PI
M_PI_2 = _cdisort.M_PI_2
M_PI_4 = _cdisort.M_PI_4
M_1_PI = _cdisort.M_1_PI
M_2_PI = _cdisort.M_2_PI
M_2_SQRTPI = _cdisort.M_2_SQRTPI
M_SQRT2 = _cdisort.M_SQRT2
M_SQRT1_2 = _cdisort.M_SQRT1_2
DEG = _cdisort.DEG

def c_disort(*args):
  return _cdisort.c_disort(*args)
c_disort = _cdisort.c_disort

def c_bidir_reflectivity(*args):
  return _cdisort.c_bidir_reflectivity(*args)
c_bidir_reflectivity = _cdisort.c_bidir_reflectivity

def c_bidir_reflectivity_hapke(*args):
  return _cdisort.c_bidir_reflectivity_hapke(*args)
c_bidir_reflectivity_hapke = _cdisort.c_bidir_reflectivity_hapke

def c_bidir_reflectivity_rpv(*args):
  return _cdisort.c_bidir_reflectivity_rpv(*args)
c_bidir_reflectivity_rpv = _cdisort.c_bidir_reflectivity_rpv

def c_dref(*args):
  return _cdisort.c_dref(*args)
c_dref = _cdisort.c_dref

def c_getmom(*args):
  return _cdisort.c_getmom(*args)
c_getmom = _cdisort.c_getmom

def c_asymmetric_matrix(*args):
  return _cdisort.c_asymmetric_matrix(*args)
c_asymmetric_matrix = _cdisort.c_asymmetric_matrix

def c_intensity_components(*args):
  return _cdisort.c_intensity_components(*args)
c_intensity_components = _cdisort.c_intensity_components

def c_fluxes(*args):
  return _cdisort.c_fluxes(*args)
c_fluxes = _cdisort.c_fluxes

def c_intensity_correction(*args):
  return _cdisort.c_intensity_correction(*args)
c_intensity_correction = _cdisort.c_intensity_correction

def c_new_intensity_correction(*args):
  return _cdisort.c_new_intensity_correction(*args)
c_new_intensity_correction = _cdisort.c_new_intensity_correction

def prep_double_scat_integr(*args):
  return _cdisort.prep_double_scat_integr(*args)
prep_double_scat_integr = _cdisort.prep_double_scat_integr

def c_secondary_scat(*args):
  return _cdisort.c_secondary_scat(*args)
c_secondary_scat = _cdisort.c_secondary_scat

def c_new_secondary_scat(*args):
  return _cdisort.c_new_secondary_scat(*args)
c_new_secondary_scat = _cdisort.c_new_secondary_scat

def calc_phase_squared(*args):
  return _cdisort.calc_phase_squared(*args)
calc_phase_squared = _cdisort.calc_phase_squared

def c_disort_set(*args):
  return _cdisort.c_disort_set(*args)
c_disort_set = _cdisort.c_disort_set

def c_set_matrix(*args):
  return _cdisort.c_set_matrix(*args)
c_set_matrix = _cdisort.c_set_matrix

def c_single_scat(*args):
  return _cdisort.c_single_scat(*args)
c_single_scat = _cdisort.c_single_scat

def c_solve_eigen(*args):
  return _cdisort.c_solve_eigen(*args)
c_solve_eigen = _cdisort.c_solve_eigen

def c_solve0(*args):
  return _cdisort.c_solve0(*args)
c_solve0 = _cdisort.c_solve0

def c_surface_bidir(*args):
  return _cdisort.c_surface_bidir(*args)
c_surface_bidir = _cdisort.c_surface_bidir

def c_interp_eigenvec(*args):
  return _cdisort.c_interp_eigenvec(*args)
c_interp_eigenvec = _cdisort.c_interp_eigenvec

def c_interp_source(*args):
  return _cdisort.c_interp_source(*args)
c_interp_source = _cdisort.c_interp_source

def c_set_coefficients_beam_source(*args):
  return _cdisort.c_set_coefficients_beam_source(*args)
c_set_coefficients_beam_source = _cdisort.c_set_coefficients_beam_source

def c_interp_coefficients_beam_source(*args):
  return _cdisort.c_interp_coefficients_beam_source(*args)
c_interp_coefficients_beam_source = _cdisort.c_interp_coefficients_beam_source

def c_upbeam_pseudo_spherical(*args):
  return _cdisort.c_upbeam_pseudo_spherical(*args)
c_upbeam_pseudo_spherical = _cdisort.c_upbeam_pseudo_spherical

def c_upbeam(*args):
  return _cdisort.c_upbeam(*args)
c_upbeam = _cdisort.c_upbeam

def c_upisot(*args):
  return _cdisort.c_upisot(*args)
c_upisot = _cdisort.c_upisot

def c_user_intensities(*args):
  return _cdisort.c_user_intensities(*args)
c_user_intensities = _cdisort.c_user_intensities

def c_xi_func(*args):
  return _cdisort.c_xi_func(*args)
c_xi_func = _cdisort.c_xi_func

def c_check_inputs(*args):
  return _cdisort.c_check_inputs(*args)
c_check_inputs = _cdisort.c_check_inputs

def c_legendre_poly(*args):
  return _cdisort.c_legendre_poly(*args)
c_legendre_poly = _cdisort.c_legendre_poly

def c_print_avg_intensities(*args):
  return _cdisort.c_print_avg_intensities(*args)
c_print_avg_intensities = _cdisort.c_print_avg_intensities

def c_print_inputs(*args):
  return _cdisort.c_print_inputs(*args)
c_print_inputs = _cdisort.c_print_inputs

def c_print_intensities(*args):
  return _cdisort.c_print_intensities(*args)
c_print_intensities = _cdisort.c_print_intensities

def c_gaussian_quadrature(*args):
  return _cdisort.c_gaussian_quadrature(*args)
c_gaussian_quadrature = _cdisort.c_gaussian_quadrature

def c_ratio(*args):
  return _cdisort.c_ratio(*args)
c_ratio = _cdisort.c_ratio

def c_fcmp(*args):
  return _cdisort.c_fcmp(*args)
c_fcmp = _cdisort.c_fcmp

def c_self_test(*args):
  return _cdisort.c_self_test(*args)
c_self_test = _cdisort.c_self_test

def c_albtrans(*args):
  return _cdisort.c_albtrans(*args)
c_albtrans = _cdisort.c_albtrans

def c_albtrans_intensity(*args):
  return _cdisort.c_albtrans_intensity(*args)
c_albtrans_intensity = _cdisort.c_albtrans_intensity

def c_print_albtrans(*args):
  return _cdisort.c_print_albtrans(*args)
c_print_albtrans = _cdisort.c_print_albtrans

def c_solve1(*args):
  return _cdisort.c_solve1(*args)
c_solve1 = _cdisort.c_solve1

def c_albtrans_spherical(*args):
  return _cdisort.c_albtrans_spherical(*args)
c_albtrans_spherical = _cdisort.c_albtrans_spherical

def c_errmsg(*args):
  return _cdisort.c_errmsg(*args)
c_errmsg = _cdisort.c_errmsg

def c_write_bad_var(*args):
  return _cdisort.c_write_bad_var(*args)
c_write_bad_var = _cdisort.c_write_bad_var

def c_write_too_small_dim(*args):
  return _cdisort.c_write_too_small_dim(*args)
c_write_too_small_dim = _cdisort.c_write_too_small_dim

def c_sgbco(*args):
  return _cdisort.c_sgbco(*args)
c_sgbco = _cdisort.c_sgbco

def c_sgbfa(*args):
  return _cdisort.c_sgbfa(*args)
c_sgbfa = _cdisort.c_sgbfa

def c_sgbsl(*args):
  return _cdisort.c_sgbsl(*args)
c_sgbsl = _cdisort.c_sgbsl

def c_sgeco(*args):
  return _cdisort.c_sgeco(*args)
c_sgeco = _cdisort.c_sgeco

def c_sgefa(*args):
  return _cdisort.c_sgefa(*args)
c_sgefa = _cdisort.c_sgefa

def c_sgesl(*args):
  return _cdisort.c_sgesl(*args)
c_sgesl = _cdisort.c_sgesl

def c_sasum(*args):
  return _cdisort.c_sasum(*args)
c_sasum = _cdisort.c_sasum

def c_saxpy(*args):
  return _cdisort.c_saxpy(*args)
c_saxpy = _cdisort.c_saxpy

def c_sdot(*args):
  return _cdisort.c_sdot(*args)
c_sdot = _cdisort.c_sdot

def c_sscal(*args):
  return _cdisort.c_sscal(*args)
c_sscal = _cdisort.c_sscal

def c_isamax(*args):
  return _cdisort.c_isamax(*args)
c_isamax = _cdisort.c_isamax

def c_twostr(*args):
  return _cdisort.c_twostr(*args)
c_twostr = _cdisort.c_twostr

def c_chapman(*args):
  return _cdisort.c_chapman(*args)
c_chapman = _cdisort.c_chapman

def c_twostr_check_inputs(*args):
  return _cdisort.c_twostr_check_inputs(*args)
c_twostr_check_inputs = _cdisort.c_twostr_check_inputs

def c_twostr_fluxes(*args):
  return _cdisort.c_twostr_fluxes(*args)
c_twostr_fluxes = _cdisort.c_twostr_fluxes

def c_twostr_solns(*args):
  return _cdisort.c_twostr_solns(*args)
c_twostr_solns = _cdisort.c_twostr_solns

def c_twostr_print_inputs(*args):
  return _cdisort.c_twostr_print_inputs(*args)
c_twostr_print_inputs = _cdisort.c_twostr_print_inputs

def c_twostr_set(*args):
  return _cdisort.c_twostr_set(*args)
c_twostr_set = _cdisort.c_twostr_set

def c_twostr_solve_bc(*args):
  return _cdisort.c_twostr_solve_bc(*args)
c_twostr_solve_bc = _cdisort.c_twostr_solve_bc

def c_planck_func1(*args):
  return _cdisort.c_planck_func1(*args)
c_planck_func1 = _cdisort.c_planck_func1

def c_planck_func2(*args):
  return _cdisort.c_planck_func2(*args)
c_planck_func2 = _cdisort.c_planck_func2

def c_disort_state_alloc(*args):
  return _cdisort.c_disort_state_alloc(*args)
c_disort_state_alloc = _cdisort.c_disort_state_alloc

def c_disort_state_free(*args):
  return _cdisort.c_disort_state_free(*args)
c_disort_state_free = _cdisort.c_disort_state_free

def c_disort_out_alloc(*args):
  return _cdisort.c_disort_out_alloc(*args)
c_disort_out_alloc = _cdisort.c_disort_out_alloc

def c_disort_out_free(*args):
  return _cdisort.c_disort_out_free(*args)
c_disort_out_free = _cdisort.c_disort_out_free

def c_twostr_state_alloc(*args):
  return _cdisort.c_twostr_state_alloc(*args)
c_twostr_state_alloc = _cdisort.c_twostr_state_alloc

def c_twostr_state_free(*args):
  return _cdisort.c_twostr_state_free(*args)
c_twostr_state_free = _cdisort.c_twostr_state_free

def c_twostr_out_alloc(*args):
  return _cdisort.c_twostr_out_alloc(*args)
c_twostr_out_alloc = _cdisort.c_twostr_out_alloc

def c_twostr_out_free(*args):
  return _cdisort.c_twostr_out_free(*args)
c_twostr_out_free = _cdisort.c_twostr_out_free

def c_dbl_vector(*args):
  return _cdisort.c_dbl_vector(*args)
c_dbl_vector = _cdisort.c_dbl_vector

def c_int_vector(*args):
  return _cdisort.c_int_vector(*args)
c_int_vector = _cdisort.c_int_vector

def print_test(*args):
  return _cdisort.print_test(*args)
print_test = _cdisort.print_test

def c_free_dbl_vector(*args):
  return _cdisort.c_free_dbl_vector(*args)
c_free_dbl_vector = _cdisort.c_free_dbl_vector

def c_setout(*args):
  return _cdisort.c_setout(*args)
c_setout = _cdisort.c_setout

def c_inter(*args):
  return _cdisort.c_inter(*args)
c_inter = _cdisort.c_inter

def c_gaussian_quadrature_test(*args):
  return _cdisort.c_gaussian_quadrature_test(*args)
c_gaussian_quadrature_test = _cdisort.c_gaussian_quadrature_test

def disort_test01():
  return _cdisort.disort_test01()
disort_test01 = _cdisort.disort_test01

def disort_test02():
  return _cdisort.disort_test02()
disort_test02 = _cdisort.disort_test02

def disort_test03():
  return _cdisort.disort_test03()
disort_test03 = _cdisort.disort_test03

def disort_test04():
  return _cdisort.disort_test04()
disort_test04 = _cdisort.disort_test04

def disort_test05():
  return _cdisort.disort_test05()
disort_test05 = _cdisort.disort_test05

def disort_test06():
  return _cdisort.disort_test06()
disort_test06 = _cdisort.disort_test06

def disort_test07():
  return _cdisort.disort_test07()
disort_test07 = _cdisort.disort_test07

def disort_test08():
  return _cdisort.disort_test08()
disort_test08 = _cdisort.disort_test08

def disort_test09():
  return _cdisort.disort_test09()
disort_test09 = _cdisort.disort_test09

def disort_test10():
  return _cdisort.disort_test10()
disort_test10 = _cdisort.disort_test10

def disort_test11():
  return _cdisort.disort_test11()
disort_test11 = _cdisort.disort_test11

def disort_test12():
  return _cdisort.disort_test12()
disort_test12 = _cdisort.disort_test12

def disort_test13():
  return _cdisort.disort_test13()
disort_test13 = _cdisort.disort_test13

def disort_test14():
  return _cdisort.disort_test14()
disort_test14 = _cdisort.disort_test14

def locate(*args):
  return _cdisort.locate(*args)
locate = _cdisort.locate

def flocate(*args):
  return _cdisort.flocate(*args)
flocate = _cdisort.flocate
# This file is compatible with both classic and new-style classes.


